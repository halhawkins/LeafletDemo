import L, { Control, ControlPosition, DomUtil } from "leaflet";
import { FC, useRef, useEffect } from "react";
import { Root, createRoot } from "react-dom/client";
import { useMap } from "react-leaflet";
import { useSelector } from "react-redux";
import { RootState } from "../store";
import "./LocationSearch.css";
import searchIcon from "../assets/search-icon.svg";

const LocationSearch: FC<{ position: ControlPosition }> = ({position}) => {
    const map = useMap();
    const controlContainerRef = useRef<HTMLDivElement | null>(null);
    const controlRef = useRef<Control | null>(null);
    const inputBoxRef = useRef<HTMLInputElement | null>(null);
    const buttonRef = useRef<HTMLButtonElement | null>(null);
    const rootRef = useRef<Root | null>(null);
    useEffect(() => {
        console.log("ðŸŽ„LocationSearch mountedðŸŽ„");
        const control = new Control({position});
        control.onAdd = () => {
            const container = DomUtil.create("div", "leaflet-control");
            controlContainerRef.current = container;
            rootRef.current = createRoot(container);
            rootRef.current.render(
                <div className="search-box">
                    <input ref={inputBoxRef} id="searchinput" type="text" className="search-input" placeholder="Location name" />
                    <button ref={buttonRef} className="search-btn">
                        <img src={searchIcon} alt="Search"/>
                    </button>
                </div>
            );
            return container;
        }
        control.onRemove = () => {
            if (rootRef.current) {
                rootRef.current?.unmount();
                rootRef.current = null;
            }
            controlContainerRef.current = null;
        };

        map.addControl(control);
        controlRef.current = control;

        if (inputBoxRef.current) {
            L.DomEvent.disableClickPropagation(inputBoxRef.current);
        }
        if (buttonRef.current) {
            L.DomEvent.disableClickPropagation(buttonRef.current);
        }

        return () => {
            map.removeControl(control);
        };
    },[])
    return null;
}


export default LocationSearch;
/**
 * Following is code generated by Copilot to add geocoding to the LocationSearch component
 */
// import { Control, ControlPosition, DomUtil } from "leaflet";
// import { FC, useRef, useEffect, useState } from "react";
// import { Root, createRoot } from "react-dom/client";
// import { useMap } from "react-leaflet";
// import { useSelector } from "react-redux";
// import { RootState } from "../store";
// import "./LocationSearch.css";
// import searchIcon from "../assets/search-icon.svg";

// const LocationSearch: FC<{ position: ControlPosition }> = ({ position }) => {
//     const map = useMap();
//     const controlContainerRef = useRef<HTMLDivElement | null>(null);
//     const rootRef = useRef<Root | null>(null);
//     const [searchResults, setSearchResults] = useState<any[]>([]);
//     const [searchQuery, setSearchQuery] = useState("");

//     useEffect(() => {
//         console.log("ðŸŽ„LocationSearch mountedðŸŽ„");
//         const control = new Control({ position });
//         control.onAdd = () => {
//             const container = DomUtil.create("div", "leaflet-control");
//             controlContainerRef.current = container;
//             rootRef.current = createRoot(container);
//             rootRef.current.render(renderSearchBox());
//             return container;
//         };
//         control.onRemove = () => {
//             if (rootRef.current) {
//                 rootRef.current.unmount();
//                 rootRef.current = null;
//             }
//             controlContainerRef.current = null;
//         };

//         map.addControl(control);

//         return () => {
//             map.removeControl(control);
//         };
//     }, [map, position]);

//     const handleSearch = async () => {
//         if (!searchQuery) return;
//         // Replace with your geocoding API
//         const response = await fetch(`https://api.example.com/geocode?q=${searchQuery}`);
//         const data = await response.json();
//         setSearchResults(data.results);
//     };

//     const renderSearchBox = () => (
//         <div className="search-box">
//             <input
//                 id="searchinput"
//                 type="text"
//                 className="search-input"
//                 placeholder="Location name"
//                 value={searchQuery}
//                 onChange={(e) => setSearchQuery(e.target.value)}
//             />
//             <a className="search-btn" href="#" onClick={handleSearch}>
//                 <img src={searchIcon} alt="Search" />
//             </a>
//             <ul className="search-results">
//                 {searchResults.map((result, index) => (
//                     <li key={index}>{result.name}</li>
//                 ))}
//             </ul>
//         </div>
//     );

//     return null;
// };

// export default LocationSearch;